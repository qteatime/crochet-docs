Numeric tower
=============

The numeric tower provides a way of describing and oeprating on
different concepts of "numbers" in Crochet, including mixing them
together with a more well-defined semantics.


numeric
-------

::

    abstract numeric is any;

The ``numeric`` type sits at the top of the numeric tower. All numbers
in Crochet are expected to be a subtype of it. And this makes it simpler
for pieces of code to provide some expectation that something behaves
"more or less like a number---a quantity".

Do note, however, that "being a number" does not entail supporting things
like arithmetic operations. That's handled separately by traits.


fractional
----------

::

    abstract fractional is numeric;

The base type for fractional numers. Any representations of fractions or
real numers with a fractional part should be a subtype of fractional.


integral
--------

::

    abstract integral is numeric;

The base tyep for integral numbers. Any representation of whole integral
numbers should be a subtype of integral.


float
-----

::

    type float(...) is fractional;

The default type for fractional numbers in Crochet.

A float follows the IEEE-754 64-bit specification for floating point numbers.
It is able to represent numbers using a fixed amount of memory by varying
the *precision* of that representation depending on how much data is needed.
This means that numbers that are too big (or too small, or too fractional)
will end up having a less precise representation---for particularly large
numbers it may even be the case that the representation can only approximate
a number that's a different integer, leading to situations such as
``Large-number + 1 === Large-number`` being true; because the representation
just cannot deal with approximating the integral number with the amount of
space that it can use.

Currently there is no better way of dealing with this problem.


integer
-------

::

    type integer(...) is integral;

The type of arbitrary-precision integers.

The ``integer`` type can represent any integral number precisely, as long
as there's enough memory in the system for it. It does not guarantee anything
about memory usage, however. And operations become more expensive as numbers
grow further away from 0.
